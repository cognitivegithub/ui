/**
 * Форма рассмотрения заявок.
 *
 * Параметры:
 * lot_id - идентификатор лота
 * stage - стадия рассмотрения.
 */
Ext.define('Application.components.applicationsOpeningForm', {
  extend: 'Ext.form.FormPanel',
  isCommissionFormDisabled: false, // Запрет редактирования коммиссии
  isRegisterDisabled: false, // Запрет регистрации новых участников
  isProtocolRegisterNumberDisabled: false, // Регистрационный номер протокола обязателен к заполнению
  isDateStartZKDisabled: false, // Дата и время начала заседания комиссии обязательны к заполнению
  isDateEndZKDisabled: false, // Дата и время окончания заседания комиссии обязателны к заполнению
  module: 'com',
  orgInfoTitle: 'Аккредитационные данные заявителя', //alena 3845
  orgInfoUrl: '#company/view/id/{0}', //alena 3845
  ids: [],
  hideProtocols: false,
  hideComission: false,
  hideSendBtn: false,
  hideSaveBtn: false,

  initComponent: function() {

    var component = this;
    component.fileFieldsetId = Ext.id();

    this.ids.oos_cancel_checkbox_id = Ext.id();
    this.ids.oos_fieldset_id = Ext.id();
    this.ids.oos_type_combo_id = Ext.id();
    this.ids.grid = Ext.id();
    this.ids.autogenerated_file_id = Ext.id();
    this.ids.protocol_information = Ext.id();
    this.ids.protocol_register_number = Ext.id();
    this.ids.date_start_zk = Ext.id();
    this.ids.time_start_zk = Ext.id();
    this.ids.date_end_zk = Ext.id();
    this.ids.time_end_zk = Ext.id();

    var commission_selected, commission_decision;

    var otherFileFieldsetId = Ext.id(),
        procedure_info_panel = Ext.id(),
        deadline_ends_cmp = Ext.id(),
        deadline_cmp = Ext.id(),
        commission_form_id = Ext.id(),
        date_happened_id = Ext.id(),
        place_happened_id = Ext.id();

    this.addEvents('reloadFilePanels');
    this.addEvents('goDownloadProtocol');
    this.addEvents('applic_reviewlist_loaded');
    this.oos_type_store = this.getOosTypeStore()

    function loadApplicationOpeningFiles() {
      var proc_name = 'процедуре';
      if (component.procedure.procedure_type == PROCEDURE_TYPE_TENDER) {
        proc_name = 'конкурсе';
      } else if (component.procedure.procedure_type == PROCEDURE_TYPE_QUOTATION_REQ) {
        proc_name = 'запросе предложений';
      }

      component.addDownloadFilesPanel(component);
      component.addFilesPanel(component, proc_name);
      component.doLayout();

      performRPCCall(RPC.Protocol.getProtocolsByLot,
        [{
          lot_id: component.lot_id,
          req_id: 1,
          stage: component.stage
        }],
        {wait_delay: 0, wait_text: 'Загружаются файлы протоколов. Подождите...'},
        function (result) {

        if (result.success) {
          if(result.protocols && result.protocols[0]) {
            if(result.protocols[0].oos_exchage_cancelled) {
              Ext.getCmp(component.ids.oos_cancel_checkbox_id).checked = true;
              Ext.getCmp(component.ids.oos_cancel_checkbox_id).fireEvent('check', true);
            } else {
              if(result.protocols[0].oos_type_id) {
                Ext.getCmp(component.ids.oos_type_combo_id).setValue(result.protocols[0].oos_type_id);
              }
              if(result.protocols[0].date_happened) {
                Ext.getCmp(date_happened_id).setValue(result.protocols[0].date_happened);
              }
              if(result.protocols[0].place_happened) {
                Ext.getCmp(place_happened_id).setValue(result.protocols[0].place_happened);
              }
            }
          }

          loadFilesIntoFilePanels(result.protocols, {deleteHandler: component.deleteHandler});

        } else {
          echoResponseMessage(result);
        }
      });
    }

    Ext.namespace('datagrid');

    Ext.apply(this, {
      title: this.title ? this.title : 'Вскрытие конвертов с заявками участников конкурса',
      fileUpload: true,
      border: true,
      frame: true,
      width: 900,
      items: [{
        id: deadline_ends_cmp,
        border: false,
        hidden: true,
        bodyStyle: 'font-size: 12px'
      }, {
        id: deadline_cmp,
        border: false,
        hidden: true,
        bodyStyle: 'font-size: 12px'
      }, {
        xtype: 'fieldset',
        title: this.procTitle ? this.procTitle : 'Общие сведения о процедуре',
        //hideBorders: true,
        cls: 'spaced-fieldset',
        defaults: {bodyStyle: 'padding: 0px'},
        items: [{
          id: procedure_info_panel,
          hideTitle: true,
          border: false,
          cls: 'x-panel-mc',
          items: []
        }]}, {
        xtype: 'fieldset',
        title: 'Данные для осуществления публикации протокола на zakupki.gov.ru',
        cls: 'spaced-fieldset',
        id: component.ids.oos_fieldset_id,
        hidden: true,
        disabled: true,
        labelWidth:270,
        defaults: {
          bodyStyle: 'padding: 0px'
        },
        items: [
          {
            xtype: 'checkbox',
            name: 'oos_exchange_cancelled',
            id: component.ids.oos_cancel_checkbox_id,
            fieldLabel: 'Не отправлять протокол в ЕИС',
            listeners: {
              check: function(cb, v) {
                if(v) {
                  Ext.getCmp(component.ids.oos_type_combo_id).disable();
                  Ext.getCmp(date_happened_id).disable();
                  Ext.getCmp(place_happened_id).disable();
                } else {
                  Ext.getCmp(component.ids.oos_type_combo_id).enable();
                  Ext.getCmp(date_happened_id).enable();
                  Ext.getCmp(place_happened_id).enable();
                }
              }
            }
          }, {
            xtype: 'Application.components.combo',
            name: 'oos_type_id',
            fieldLabel: 'Тип протокола по классификатору ЕИС',
            id: component.ids.oos_type_combo_id,
            anchor: '100%',
            valueField: 'code',
            displayField: 'name',
            hiddenName: 'oos_type_id',
            emptyText: 'Для отправки протокола в ЕИС необходимо выбрать тип по классификатору ЕИС',
            triggerAction: 'all',
            mode: 'local',
            forceSelection: true,
            store: component.getOosTypeStore()
          }, {
            xtype: 'datefield',
            name: 'date_happened',
            width: 120,
            id: date_happened_id,
            fieldLabel: 'Дата фактического рассмотрения заявок',
            format: 'd.m.Y',
            altFormats: 'c|d.m.Y H:i:s|d.m.Y H:i'
          }, {
            xtype: 'textfield',
            name: 'place_happened',
            width: 250,
            id: place_happened_id,
            fieldLabel: 'Место рассмотрения заявок'
          }
        ]
      },
      component.getProtocolInformation(),
        {
          xtype: 'Application.components.CommissionForm',
          id: commission_form_id,
          title: 'Сведения о комиссии',
          expander: null,
          disabled: component.isCommissionFormDisabled,
          hidden: Main.config.hide_applic_opened_commission || component.hideComission,
          listeners: {
            render: function() {
              this.relayEvents(component, ['applic_reviewlist_loaded']);
            }
          }
      }, component.getGrid(), {
        xtype: 'hidden',
        name: 'stage',
        value: component.stage
      }, {
        xtype: 'hidden',
        name: 'lot_id',
        value: component.lot_id
      }],
      buttons: component.buttons || [{
        hidden: component.isWindow,
        text: 'Назад',
        handler: function () {
          history.go(NO_MAGIC_NUMBER_MINUS_ONE);
        }
      }, {
        text: 'Сохранить',
        hidden: component.hideSaveBtn,
        handler: function () {
          if (component.getForm().isValid()) {
            performSave(component);
          }
        }
      }, {
        text: 'Направить',
        hidden: component.hideSendBtn,
        handler: function () {
          if (component.getForm().isValid()) {
            Ext.Msg.show({
              title: 'Направить',
              msg: 'Направить на утверждение времени заседания комисси?',
              buttons: Ext.Msg.YESNO,
              icon: Ext.MessageBox.QUESTION,
              fn: function (result) {
                switch (result) {
                  case 'yes':
                    performSave(component, null, 'referToConfirmDateProceedings', true, false);
                    break;
                  case 'no':
                  case 'cancel':
                    break;
                }
              }
            });
          }
        }
      }],
      listeners: {
        afterrender: function() {
          performRPCCall(
            RPC.Applic.proceedingsZK,
            [{lot_id: component.lot_id, stage: component.stage}],
            {wait_delay: 0, wait_text: 'Загружаются заявки. Подождите...'},
            function (result) {
            if (result.success) {
              component.lot = result.lot;
              component.procedure = result.procedure;

              if (component.lot.protocol_register_number) {
                Ext.getCmp(component.ids.protocol_register_number).setValue(component.lot.protocol_register_number);
              }

              if (component.lot.date_start_zk) {
                Ext.getCmp(component.ids.date_start_zk).setValue(component.lot.date_start_zk);
              }

              if (component.lot.time_start_zk) {
                Ext.getCmp(component.ids.time_start_zk).setValue(component.lot.time_start_zk);
              }

              if (component.lot.date_end_zk) {
                Ext.getCmp(component.ids.date_end_zk).setValue(component.lot.date_end_zk);
              }

              if (component.lot.time_end_zk) {
                Ext.getCmp(component.ids.time_end_zk).setValue(component.lot.time_end_zk);
              }

              if (component.lot.date_published) {
                component.procedure.date_published = component.lot.date_published;
              }

              if (component.lot.date_end_registration) {
                component.procedure.date_end_registration = component.lot.date_end_registration;
              }

              if (component.lot.date_applic_opened) {
                component.procedure.date_applic_opened = component.lot.date_applic_opened;
              }

              Ext.getCmp(procedure_info_panel).update(component.getProcTpl(component.procedure));
              commission_selected = result.commission_selected;
              commission_decision = result.commission_decision;
              component.fireEvent('applic_reviewlist_loaded', result);

              var now = new Date(), tmp, last_date, days;

              tmp = component.lot.date_applic_opened;
              last_date = parseDate(tmp);
              if(last_date) {
                last_date.setDate(last_date.getDate() + 2); // alena POSPBA-429 дата вскрытия конвертов + 2 дня

                // Ext.getCmp(deadline_ends_cmp).update('<div style="background-color: #C92100; padding: 10px; color: white"><b>Крайний срок публикации протокола вскрытия конвертов <u>истёк</u> '+last_date.format('d.m.Y')+'</b></div>');
                // Ext.getCmp(deadline_cmp).update('<div style="background-color: #C92100; padding: 10px; color: white"><b>Крайний срок публикации протокола вскрытия конвертов '+last_date.format('d.m.Y')+'</b></div>');
                Ext.getCmp(deadline_ends_cmp).setVisible(now>last_date);
                Ext.getCmp(deadline_cmp).setVisible(now<=last_date);
              }

              Ext.getCmp(component.ids.grid).getStore().loadData({applics: result.applications});

              if (component.procedure.send_to_oos && result.oos_types) {
                Ext.getCmp(component.ids.oos_type_combo_id).getStore().loadData({rows: result.oos_types});
              }
              component.showOosFields();

              if (Application.models.Procedure.groups.paper_forms.indexOf(component.procedure.procedure_type) >= 0
              // -->-- alena 3844 не скрывать эти блоки, если разрешено заводить заявки поставщиков, формировать протоколы и т.д.
                  && !Main.config.allow_customer_add_applic) {
                var comissionForm = Ext.getCmp(commission_form_id);
                if (comissionForm) {
                  comissionForm.hide();
                }

                var autogeneratedFile = Ext.getCmp(component.autogenerated_file_id);
                if (autogeneratedFile) {
                  autogeneratedFile.hide();
                }
                grid.hide(); 
              }
              component.fireEvent('reloadFilePanels');
            } else {
              echoResponseMessage(result);
            }
          });
        },
        reloadFilePanels: function() {
          component.remove(Ext.getCmp(component.fileFieldsetId));
          component.fileFieldsetId = Ext.id();
          component.remove(Ext.getCmp(otherFileFieldsetId));
          otherFileFieldsetId = Ext.id();
          loadApplicationOpeningFiles();
        },
        goDownloadProtocol: function() {
          var commission_id = parseInt(Ext.getCmp(commission_form_id).getCommissionValue());
          if (!commission_id) {
            commission_id = -1;
          }
          if (Main.config.doc_from_template) {
            window.location = this.module + '/report/downloadTemplate/lot/'+component.lot_id+'/commission/'+commission_id+'/stage/'+component.stage;
          } else {
            window.location = 'protocol/download/lot/'+component.lot_id+'/commission/'+commission_id+'/stage/'+component.stage;
          }
        },
        referToConfirmDateProceedings: function () {
            performRPCCall(RPC.Applic.referToConfirmDateProceedings, [{
              lot_id: component.lot_id
            }],
            null,
            function (result) {
              if (result.success) {
                redirect_to('po/procedure/zkWorkInProccess');
                Ext.Msg.show({
                  title: 'Успех',
                  msg: 'Успешно направлена на утверждение времени заседания ЗК',
                  icon: Ext.MessageBox.INFO
                });
              } else {
                echoResponseMessage(result);
              }
            });
        },
        /**
         * @deprecated
         * @param {*} resp
         * @return {void}
         */
        goSignProtocolPage: function(resp) {
          var sign_url = this.module + '/protocol/signprotocol/lot/'+component.lot_id+'/stage/'+component.stage;
          if (component.act && component.act=='decline') sign_url += '/act/'+component.act;
          if (resp.result.success && component.stage==2 && resp.result.showAllButton) {
            sign_url += '/showall/1';
          }
          redirect_to(sign_url);
        }
      }
    });

    Application.components.applicationsOpeningForm.superclass.initComponent.call(this);
    this.form.api = component.getFormApi();// alena POSPBA-429 возможность прописать другой action//{
    //  submit: RPC.Applic.saveReviewApplication
    //};
    this.form.waitMsgTarget = true;
  }

  ,getProcTpl: function(){
     return getProcedureDataTemplate().apply(this.procedure);
  }

  ,getFormApi: function(){
    return {
      submit: RPC.Applic.saveReviewApplication
    };
  }

  ,addFilesPanel: function(component, proc_name){
        component.add({
        xtype: 'Application.components.FilesPanel',
        id: component.fileFieldsetId,
        hidden: component.hideProtocols,
        border: false,
        file_panels: [{
          name: 'Протокол вскрытия конвертов с заявками на участие в ' + proc_name,
          xtype: 'fieldset',
          descr: '<p style="margin: 0px; font-size: 7pt;"><b>Актуальным может быть только один файл протокола.</b> Если ваш документ многостраничный, то размещайте сканы в архиве, либо в документ Word.</p>',
          withDescr: false,
          req_id: 1
        }]
      });
  },
  addDownloadFilesPanel: function (component) {
    component.add(
      {
        xtype: 'panel',
        border: false,
        cls: 'spaced-panel',
        id: component.autogenerated_file_id,
        hidden: component.hideProtocols,
        items: [{
          title: 'Протокол открытия доступа участников',
          xtype: 'fieldset',
          bodyStyle: 'padding: 0 3px',
          cls: 'spaced-fieldset',
          items: [{
            html: 'Вы можете скачать сформированный протокол открытия доступа' +
            ' участников закупки для последующего использования и публикации на площадке, ' +
            'либо опубликовать собственный протокол.'
          }],
          buttons: [{
            text: 'Сформировать протокол',
            handler: function () {
              if (component.getForm().isValid()) {
                performSave(component, null, 'goDownloadProtocol', false, false);
              }
            }
          }]
        }]
      });
  },

  showOosFields: function () {
    if (this.procedure.send_to_oos) {
      Ext.getCmp(this.ids.oos_fieldset_id).enable();
      Ext.getCmp(this.ids.oos_fieldset_id).show();
    }
  },

  getOosTypeStore: function() {
    return new Ext.data.DirectStore({
      autoDestroy: true,
      autoLoad: false,
      root: 'rows',
      idProperty: 'code',
      fields: ['code', 'name']
    });
},

  getProtocolInformation: function () {
    return {
      xtype: 'fieldset',
      cls: 'spaced-fieldset',
      id: this.ids.protocol_information,
      title: 'Информация о протоколе',
      hidden: this.hideProtocols,
      items: [
        {
          xtype: 'fieldset',
          style: 'margin: 0; padding: 3px 0;',
          layout: 'column',
          border: false,
          defaults: {
            anchor: '100%'
          },
          items: [
            {
              html: 'Регистрационный номер протокола' + (!this.isProtocolRegisterNumberDisabled ? REQUIRED_FIELD : '') + ':',
              width: 300
            },
            {
              xtype: 'textfield',
              name: 'protocol_register_number',
              id: this.ids.protocol_register_number,
              allowBlank: this.isProtocolRegisterNumberDisabled,
              disabled: this.isProtocolRegisterNumberDisabled,
              width: 300
            }
          ]
        },
        {
          xtype: 'fieldset',
          style: 'margin: 0; padding: 3px 0;',
          layout: 'column',
          border: false,
          defaults: {
            anchor: '100%'
          },
          items: [
            {
              html: 'Дата и время начала заседания комиссии' + (!this.isDateStartZKDisabled ? REQUIRED_FIELD : '') + ':',
              width: 300
            },
            {
              xtype: 'Application.components.dateField',
              altFormats: 'c|d.m.Y H:i:s|d.m.Y H:i',
              allowBlank: this.isDateStartZKDisabled,
              disabled: this.isDateStartZKDisabled,
              id: this.ids.date_start_zk,
              name: 'date_start_zk',
              width: 100,
              format: 'd.m.Y'
            },
            {
              html: '&nbsp',
              width: 20
            },
            {
              xtype: 'timefield',
              allowBlank: this.isDateStartZKDisabled,
              disabled: this.isDateStartZKDisabled,
              id: this.ids.time_start_zk,
              name: 'time_start_zk',
              width: 60,
              format: 'H:i'
            }]
        },
        {
          xtype: 'fieldset',
          style: 'margin: 0; padding: 3px 0;',
          layout: 'column',
          border: false,
          defaults: {
            anchor: '100%'
          },
          items: [
            {
              html: 'Дата и время окончания заседания комиссии' + (!this.isDateEndZKDisabled ? REQUIRED_FIELD : '') + ':',
              width: 300
            },
            {
              xtype: 'Application.components.dateField',
              altFormats: 'c|d.m.Y H:i:s|d.m.Y H:i',
              allowBlank: this.isDateEndZKDisabled,
              disabled: this.isDateEndZKDisabled,
              id: this.ids.date_end_zk,
              name: 'date_end_zk',
              width: 100,
              format: 'd.m.Y'
            },
            {
              html: '&nbsp',
              width: 20
            },
            {
              xtype: 'timefield',
              allowBlank: this.isDateEndZKDisabled,
              disabled: this.isDateEndZKDisabled,
              id: this.ids.time_end_zk,
              name: 'time_end_zk',
              width: 60,
              format: 'H:i'
            }]
        }
      ]
    }
  },

  // таблица-список поданых заявок
  getGrid: function() {
    var component = this;

    var store = new Ext.data.DirectStore({
      autoDestroy: true,
      autoLoad: false,
      root: 'applics',
      idProperty: 'app_id',
      autoSave: false,
      fields: ['id', 'app_id', 'supplier_id', 'supplier', {name: 'date', type: 'date', dateFormat: 'c'}, 'order_number_added']
    });

    var dataGridColumns = [
      {
        header: "Порядковый<br/>номер",
        id: 'id',
        dataIndex: 'id',
        width: 30
      },
      {
        header: "Дата и время<br/>регистрации заявки",
        dataIndex: 'date',
        renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
        width: 60
      }, {
        header: "Заявитель",
        dataIndex: 'supplier',
        width: 180
      }, {
        header: "Операции",
        xtype: 'textactioncolumn',
        actionsSeparator: '<br/>',
        items: [
          {
            tooltip: 'Содержимое заявки',
            text: 'Содержимое заявки',
            newWindow: true,
            href: function(value, p, record) {
              return String.format('#com/applic/view/id/{0}/lot_id/{1}', record.get('app_id'), component.lot.id);
            }
          }, {
            tooltip: 'Подать запрос на разъяснение положений заявки',
            text: 'Подать запрос на разъяснение положений заявки',
            isHidden: function(value, p, record) {
              return (component.procedure.procedure_type === PROCEDURE_TYPE_QUOTATION_REQ
                // alena 3844 не отображать для бумажных форм
              || Application.models.Procedure.groups.paper_forms.indexOf(component.procedure.procedure_type) === 0 ) ? false : true;
            },
            href: function(value, p, record) {
              return String.format('#com/procedure/requestapplic/type/request/procedure/{0}/lot/{1}/application/{2}', component.procedure.id, component.lot.id, record.get('app_id'));
            }
          }, {
            tooltip: component.orgInfoTitle, //alena 3845 'Аккредитационные данные заявителя',
            text: component.orgInfoTitle, //alena 3845 'Аккредитационные данные заявителя',
            newWindow: true,
            isHidden: function(value, p, record) {
              // не отображать для  поле "Сведения о заявителе" - для формы Открытия доступа / вскрытия конвертов
              if(component.orgInfoTitle == 'Сведения о заявителе'){
                return true;
              }
              return false;
            },
            href: function(value, p, record) {
              return String.format(component.orgInfoUrl, record.get('supplier_id')); //alena 3845
            }
          }
        ]
      }];

    var gridPanel = new Ext.grid.GridPanel({
      store: store,
      id: component.ids.grid,
      cls: 'spaced-fieldset thinborder',
      cm: new Ext.grid.ColumnModel({
        columns: dataGridColumns
      }),
      viewConfig: {
        forceFit:true
      },
      autoHeight: true,
      hideTitle: true,
      border: false
    });

    return new Ext.Panel({
        frame: false,
        border: false,
        name: 'show_applics',
        layout: 'form',
        items: [
          gridPanel
        ],
        buttons: component.isRegisterDisabled ? [] : [
          {
            hidden: component.isWindow ? !isSecretary() : false,
            text: 'Регистрация заявок',
            handler: function () {
              if (component.isWindow) {
                window.open('#' + component.module + '/applic/create/lot/' + component.lot.id, '_blank');
              } else {
                redirect_to(component.module + '/applic/create/lot/' + component.lot.id);
              }
            },
            scope: this
          }
        ]
      }
    );
  },

  deleteHandler: function (fileInfo) {
    var component = this;
    performRPCCall(RPC.Protocol.deleteProtocol, [fileInfo], {wait_text: 'Файл удаляется. Подождите...'}, function (result) {
      if (result.success) {
        component.fireEvent('reloadFilePanels');
        echoResponseMessage(result);
      } else {
        echoResponseMessage(result);
      }
    })
}

});
