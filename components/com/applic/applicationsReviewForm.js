/**
 * Компонент рисует форму рассмотрения заявок.
 * Параметры:
 * lot_id - идентификатор лота
 * stage - стадия рассмотрения:
      1 - Рассмотрение заявок на участие
      2 - Подведение итогов процедуры
      3 - Подпись протокола проведения аукциона
      4 - Подпись протокола проведения переторжки
      6 - Подпись протокола квалификационного отбора
*/
Ext.define('Application.components.applicationsReviewForm', {
  extend: 'Ext.form.Panel',
  module: 'com', // alena 4394
  title_names: { // alena POSPBA-208
      '1': 'Рассмотрение заявок на участие',
      '2': 'Подведение итогов процедуры',
      '3': 'Подпись протокола проведения аукциона',
      '4': 'Подпись протокола проведения переторжки',
      'decline': 'Отстранения участников',
      '6': 'Подведение итогов квалификационного отбора',
      'supplier_info_tooltip': 'Аккредитационные сведения',
      'supplier_info_text': 'Аккредитационные сведения заявителя',
      'panel1_stage1': 'Решение членов комиссии о допуске участника',
      'panel1_stage2': 'Решение членов комиссии о рейтинге участника'
    }
  ,protocol_names: {// alena POSPBA-366
      '1': 'Протокол рассмотрения заявок на участие',
      '2': 'Протокол подведения итогов процедуры',
      '3': 'Протокол проведения аукциона',
      '4': 'Протокол проведения переторжки',
      'decline': 'Протокол отстранения участников',
      '6': 'Протокол квалификационного отбора'
    }
  ,downloadHref: 'protocol/download'
  ,downloadListHref: 'protocol/downloadAdmittedSuppliersList'
  ,downloadConsiderHref: 'po/report/considerationDraftDecisionDoc'
  ,downloadComparisonHref: 'po/report/comparisonDraftDecisionDoc'
  ,downloadConsiderationSummingHref: 'po/report/considerationSummingDraftDecisionDoc',
  
    
  initComponent: function() {

    var component = this;
    this.ids = new Array();
    this.ids.oos_fieldset_id = Ext.id();
    this.ids.oos_cancel_checkbox_id = Ext.id();
    this.ids.is_autoprotocol_id = Ext.id();
    this.ids.date_start_zk = Ext.id();
    this.ids.date_end_zk = Ext.id();
    this.ids.time_start_zk = Ext.id();
    this.ids.time_end_zk = Ext.id();

    var lot, commission_selected, commission_decision,
        order_number_assign_array = [[0, 'Не выбрано', false]];
    var otherFileFieldsetId = Ext.id(),
        procedure_info_panel = Ext.id(),
        deadline_ends_cmp = Ext.id(),
        deadline_cmp = Ext.id(),
        commission_form_id = Ext.id(),
        oos_type_combo_id = Ext.id(),

        date_happened_id = Ext.id(),
        place_happened_id = Ext.id(),
        autogenerated_file_id = Ext.id(),
        autogenerated_list_file_id = Ext.id(),
        archive_applic_id = Ext.id();
        download_consideration_draft_decision_id = Ext.id();
        download_comparison_draft_decision_id = Ext.id();
        consideration_and_summing_draft_decision_id = Ext.id();
        
    component.fileFieldsetId = Ext.id();
    component.commission_form_id = commission_form_id;
    component.applic_grid_id = Ext.id();
    
    this.addEvents('reloadFilePanels');
    this.addEvents('goDownloadProtocol');
    this.addEvents('goDownloadListProtocol');
    this.addEvents('goDownloadConsiderationDraftDecision');
    this.addEvents('goDownloadComparisonDraftDecision');
    this.addEvents('goDownloadConsiderationSummingDraftDecision');
    
    this.addEvents('applic_reviewlist_loaded');
    this.addEvents('calculatePlaces');

    this.stage = Number(this.stage);
    
    var rnp_text = '&nbsp;<a class="rnp_present" title="По состоянию на '+new Date().format('d.m.Y')+' данный участник находится в реестре недобросовестных поставщиков в соответствии со ст. 19 94-ФЗ. Информация из реестра недобросовестных поставщиков обновляется на электронной площадке 1 раз в день. Рекомендуем сверять информацию на сайте http://rnp.fas.gov.ru/"></a>';

    var protocol_type = this.act=='decline'?'decline':(''+this.stage);

    var is_autoprotocol = this.stage==3||this.stage==4;
    function loadApplicationReviewFiles() {
//      component.add({
//        xtype: 'Application.components.FilesPanel',
//        id: fileFieldsetId,
//        border: false,
//        file_panels: [{
//          name: component.protocol_names[protocol_type],
//          xtype: 'fieldset',
//          withDescr: false,
//          descr: '<p style="margin: 0px; font-size: 7pt;">' + component.title_names.protocol_actual_descr
//                  + 'Если ваш документ многостраничный, то размещайте сканы в архиве, либо в документ Word.</p>',
//          req_id: 1
//        }]
//      });
      component.addFilesPanel(component,protocol_type);
      component.doLayout();
      var params = {
        wait_delay: 0,
        wait_text: 'Загружаются файлы протоколов. Подождите...'
      };
      performRPCCall(RPC.Protocol.getProtocolsByLot, [{lot_id: component.lot_id, stage: component.stage, tab: component.tab}], params, function(result) {
        var params = {};
        var oos_processed = false;
        if (!is_autoprotocol && lot.status != 7) {
          params.deleteHandler = component.deleteHandler;
        }
        if (result.success && result.protocols) {
          for (var i = NO_MAGIC_NUMBER_ZERO; i < result.protocols.length; i++) {
            if (result.protocols[i].html && APPLICATION_STATUS_PROCESSED == result.protocols[i].html.status) {
              result.protocols[i].html.obsolete = true;
              result.protocols[i].html.obsolete_text = 'отменен';
            }
            if (lot.status == parseInt('7') && result.protocols[i].html
                  && NO_MAGIC_NUMBER_ONE == result.protocols[i].html.status) {
              result.protocols[i].html.deleteHandler = component.deleteHandler;
            }
            if (result.protocols[i].oos_exchage_cancelled && !oos_processed) {
              Ext.getCmp(component.ids.oos_cancel_checkbox_id).checked = true;
              Ext.getCmp(component.ids.oos_cancel_checkbox_id).fireEvent('check');
              oos_processed = true;
            } else if (!oos_processed) {
              if (result.protocols[i].oos_type_id && Ext.getCmp(oos_type_combo_id)) {
                Ext.getCmp(oos_type_combo_id).setValue(result.protocols[i].oos_type_id);
              }
              if (result.protocols[i].date_happened && Ext.getCmp(date_happened_id)) {
                Ext.getCmp(date_happened_id).setValue(result.protocols[i].date_happened);
              }
              if (result.protocols[i].place_happened && Ext.getCmp(place_happened_id)) {
                Ext.getCmp(place_happened_id).setValue(result.protocols[i].place_happened);
              }
              oos_processed = true;
            }
          }
        } else if (result.success && !result.protocols) {
          loadFilesIntoFilePanels(result.protocols, params, false);
        } else {
          echoResponseMessage(result);
        }
      });
    }

      function forDate(record){
          cdate =  record.data.date_forwarded[0];
          for (i=0; i<record.data.date_forwarded.length; ++i){
              if (cdate < record.data.date_forwarded[i]){
                  cdate = record.data.date_forwarded[i];
              }
          }
          return cdate;
      }

      function solDate(record){
          cdate =  record.data.date_solved[0];
          for (i=0; i<record.data.date_solved.length; ++i){
              if (cdate < record.data.date_solved[i]){
                  cdate = record.data.date_solved[i];
              }
          }
          return cdate;
      }

      function canDate(record){
          cdate =  record.data.date_cancelled[0];
          for (i=0; i<record.data.date_cancelled.length; ++i){
              if (cdate < record.data.date_cancelled[i]){
                  cdate = record.data.date_cancelled[i];
              }
          }
          return cdate;
      }

    this.deleteHandler = function(fileInfo) {
      performRPCCall(RPC.Protocol.deleteProtocol, [fileInfo], {wait_text: 'Файл удаляется. Подождите...'}, function(result) {
        if (result.success) {
          component.fireEvent('reloadFilePanels');
          echoResponseMessage(result);
        } else {
          echoResponseMessage(result);
        }
      })
    }

    var store = new Ext.data.DirectStore({
      autoDestroy: true,
      autoLoad: false,
      api: {
        update  : RPC.Applic.saveOrderNumberAssigned
      },
      root: 'applics',
      writer: is_autoprotocol?null:new Ext.data.JsonWriter({encode: false, writeAllFields : true}),
      idProperty: 'app_id',
      autoSave: false,
      fields: ['id', 'app_id', 'supplier_id', 'supplier',
               {name: 'date', type: 'date', dateFormat: 'c'},
               'accepted', 'basis_text', 'order_number_assigned', 'price', 'price_with_vat', 'rnp',
        'date_forwarded', 'date_solved', 'date_cancelled', 'protocol_register_number', 'date_start_zk',
        'time_start_zk', 'date_end_zk', 'time_end_zk'
      ]
    });

    var oos_type_store =  new Ext.data.DirectStore({
      autoDestroy: true,
      autoLoad: false,
      root: 'rows',
      idProperty: 'code',
      fields: ['code', 'name']
    });

    /*var store = new Ext.data.JsonStore({
      idProperty: 'id',
      fields: ['id', 'app_id', {name: 'date', type: 'date', dateFormat: 'c'}, 'accepted', 'basis_text', 'order_number_assigned']
    });*/

    var orderNumberStore = new Ext.data.ArrayStore({
      fields: ['id', 'display', 'disabled'],
      data: order_number_assign_array
    });
    
    function supplier_renderer(value, meta, record) {
      if (record.data.rnp && record.data.rnp==true) {
        return value+rnp_text;
      } else {
        return value;
      }
    }

    component.members_places = {};
    var expanded_rows = [];
    var expander_config = {
      enableCaching: false,
      createExpandingRowPanelItems: function(grid, store, record, rowIndex) {
        var items=[], i;
        var commission_form = Ext.getCmp(commission_form_id);
        var commission_members = commission_form.getCommissionMembers();
        var panel1 = component.createPanel1forExpander(component, record, commission_members, component.procedure);
        var panel2 = component.createPanel2forExpander(component, record, commission_members, component.procedure);
        var panel3 = component.createCriteriaPanel(component, record, commission_members, store);

        // Если у нас есть сохраненные ранее данные - подгружаем их.
        if (commission_selected && Ext.getCmp(commission_form_id).getCommissionValue()==commission_selected && expanded_rows.indexOf(record.get('app_id'))==-1) {
          expanded_rows.push(record.get('app_id'));
          var n, i;
          for(i=0, n=commission_members.length; i<n; ++i) {
            var member_id = commission_members[i].id;
            if (!Ext.getCmp('member_attended_'+member_id).getValue()) continue;
            if (commission_decision[record.get('app_id')] && commission_decision[record.get('app_id')][member_id]) {
              setFieldValue('decision_'+record.get('id')+'_'+member_id, commission_decision[record.get('app_id')][member_id].decision);
              //Ext.getCmp('decision_'+record.get('id')+'_'+member_id).fireEvent('select');
              setFieldValue('reason_decision_'+record.get('id')+'_'+member_id, commission_decision[record.get('app_id')][member_id].reason);
            }
          }
          setFieldValue('commission_decision_yes_'+record.get('id'), record.get('accepted')==1);
          setFieldValue('commission_decision_no_'+record.get('id'), record.get('accepted')==-1);
          setFieldValue('basis_text_' + record.get('id'), record.get('basis_text'));
        }

        items.push(panel1);

        if (panel2) {
          items.push(panel2);
        }

        if (panel3) {
          items.push(panel3);
        }
        return items;
      }
    };

    var expander;

    var dataGridColumns = [];
    if (!is_autoprotocol) {
      expander = new Ext.ux.grid.RowExpander(expander_config);
      dataGridColumns.push(expander);
    }
    dataGridColumns.push({
      header: "Порядковый<br/>номер",
      id: 'id',
      dataIndex: 'id',
      width: 30
    });
    if([1,6].indexOf(component.stage)>=0) {
      dataGridColumns.push( {
        header: "Дата и время<br/>регистрации заявки",
        dataIndex: 'date',
        renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
        width: 40
      });
    }
    if ([2,3,4].indexOf(component.stage)>=0) {
      dataGridColumns.push({
        header: "Предложение о <br/> цене договора",
        renderer:  function(val, meta, record) {
          var result = Ext.util.Format.formatPrice(val);
          if (record.data.price_with_vat && record.data.price_with_vat === true) {
            result += ' (с учетом НДС)';
          }
          return result;
        },
        dataIndex: 'price',
        width: 40
      });
    }
    if ([1,2,3,4,6].indexOf(component.stage)>=0) {
      dataGridColumns.push({
        header: "Заявитель",
        dataIndex: 'supplier',
        width: 50,
        renderer: function(v,m,r){return supplier_renderer(v, m, r)}
      });
    }

    if ([1,2,6].indexOf(component.stage)>=0) {
      dataGridColumns.push({
        header: "Решение о допуске участника",
        xtype: 'textactioncolumn',
        actionsSeparator: '<br/>',
        items: [{
          tooltip: 'Содержимое заявки',
          text: 'Содержимое заявки',
          newWindow: true,
          href: function(value, p, record) {
           return String.format('#com/applic/view/id/{0}/lot_id/{1}', record.get('app_id'), lot.id);
          }
        },   {
          tooltip: 'Подать запрос на разъяснение положений заявки',
          text: 'Подать запрос на разъяснение положений заявки',
          isHidden: function(value, p, record) {

            // alena 3846 не отображать для бумажных форм
            if (Main.config.veb_custom || Application.models.Procedure.groups.paper_forms.indexOf(component.procedure.procedure_type) >= 0) {
              return true;
            }else{
            return (
            (component.stage == 1 &&
              (component.procedure.procedure_type!=PROCEDURE_TYPE_AUC_ASC && component.procedure.procedure_type!=PROCEDURE_TYPE_AUC_DESC))
            ||
            (component.stage == 1 && component.procedure.application_stages==1
              && (component.procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || component.procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC))
            ||
            (component.stage == 2
              && (component.procedure.procedure_type==PROCEDURE_TYPE_PERETORG_REDUC || component.procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || component.procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC || component.procedure.procedure_type == PROCEDURE_TYPE_QUALIFICATION || (!Main.config.quotation_req_enable_first_parts && component.procedure.procedure_type == PROCEDURE_TYPE_QUOTATION_REQ))) || (component.stage == 6)) ? false : true;
            }
          },
          href: function(value, p, record) {
            return String.format('#com/procedure/requestapplic/type/request/procedure/{0}/lot/{1}/application/{2}', component.proc_id, lot.id, record.get('app_id'));
          }
        },   {
          tooltip: component.title_names.supplier_info_tooltip,
          text: component.title_names.supplier_info_text,
          newWindow: true,
          isHidden: function(value, p, record) {
            if (component.procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC_26) {
              return true;
            }
            if (component.procedure.procedure_type == PROCEDURE_TYPE_AUC_DESC && component.procedure.application_stages == 2 && component.stage == 1 && record.get('supplier_id')=='') {
              return true;
            }
            if (component.procedure.procedure_type==PROCEDURE_TYPE_PUBLIC_SALE) {
              return false;
            }
            return (record.get('supplier_id')!='') ? false : true;
          },
          href: function(value, p, record) {
           return String.format('#company/view/id/{0}/lot_id/{1}/withProcuracyFiles/{2}', record.get('supplier_id'), lot.id,2);
          }
        }, {
          tooltip: 'Указать результаты рассмотрения заявки',
          text: 'Указать результаты рассмотрения заявки',
          handler: function(value, p, record) {
            expander.toggleRow(datagrid.getSelectionModel().getSelectedCell()[0]);
          }
        }]
      });
      if (!Application.models.Procedure.groups.paper_forms.indexOf(component.procedure_type) === 0) // alena 3946 не отображать для бумажных форм
      dataGridColumns.push({
        header: "Запросы на разъяснение положений заявки",
        xtype: 'textactioncolumn',
        actionsSeparator: '<br/>',
        items: [
        {
          tooltip: 'Подать запрос на разъяснение',
          text: 'Подать запрос на разъяснение',
          isHidden: function(value, p, record) {
            return (!Main.config.veb_custom || (component.stage == 1 && (component.procedure.procedure_type!=PROCEDURE_TYPE_AUC_ASC && component.procedure.procedure_type!=PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 1 && component.procedure.application_stages==1 && (component.procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || component.procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 2 && (component.procedure.procedure_type==PROCEDURE_TYPE_PERETORG_REDUC || component.procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || component.procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC || component.procedure.procedure_type == PROCEDURE_TYPE_PRICELIST_REQ || (!Main.config.quotation_req_enable_first_parts && component.procedure.procedure_type == PROCEDURE_TYPE_QUOTATION_REQ)))) ? false : true;
           },
          href: function(value, p, record) {
            return String.format('#com/procedure/requestapplic/type/request/procedure/{0}/lot/{1}/application/{2}', component.proc_id, lot.id, record.get('app_id'));
              }
         }, {
          tooltip: 'Подано запросов поставщику',
          text: function(value, p, record) {
               if (record.data.date_forwarded.length>0){
             return  'Подано запросов поставщику - '+record.data.date_forwarded.length+' ('+forDate(record)+')'
               }
             return  'Подано запросов поставщику - 0'
                },
//          isHidden: function(value, p, record) {
//             return ((component.stage == 1 && (procedure.procedure_type!=PROCEDURE_TYPE_AUC_ASC && procedure.procedure_type!=PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 1 && procedure.application_stages==1 && (procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 2 && (procedure.procedure_type==PROCEDURE_TYPE_PERETORG_REDUC || procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC || procedure.procedure_type == PROCEDURE_TYPE_PRICELIST_REQ || (!Main.config.quotation_req_enable_first_parts && procedure.procedure_type == PROCEDURE_TYPE_QUOTATION_REQ)))) ? false : true;
//                },
          href: function(value, p, record) {
                    return String.format('#com/procedure/requestappliclist/activetab/0/procedure/{0}/supplier/{1}/application/{2}', component.proc_id, record.get('supplier_id'), record.get('app_id'));
                }
         }, {
          tooltip: 'Получено ответов от поставщика',
           text:  function(value, p, record) {
             if (record.data.date_solved.length>0){
              return  'Получено ответов от поставщика - '+record.data.date_solved.length+' ('+solDate(record)+')'
               }
           return  'Получено ответов от поставщика - 0'
            },
//                isHidden: function(value, p, record) {
//                    return ((component.stage == 1 && (procedure.procedure_type!=PROCEDURE_TYPE_AUC_ASC && procedure.procedure_type!=PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 1 && procedure.application_stages==1 && (procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 2 && (procedure.procedure_type==PROCEDURE_TYPE_PERETORG_REDUC || procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC || procedure.procedure_type == PROCEDURE_TYPE_PRICELIST_REQ || (!Main.config.quotation_req_enable_first_parts && procedure.procedure_type == PROCEDURE_TYPE_QUOTATION_REQ)))) ? false : true;
//                },
           href: function(value, p, record) {
           return String.format('#com/procedure/requestappliclist/activetab/2/procedure/{0}/supplier/{1}/application/{2}', component.proc_id, record.get('supplier_id'), record.get('app_id'));
             }
         }, {
          tooltip: 'Отклонено поданных запросов',
          text:  function(value, p, record) {
                 if (record.data.date_cancelled.length>0){
                   return 'Отклонено поданных запросов - ' + record.data.date_cancelled.length +
                     ' (' + canDate(record) + ')';
                 }
                 return 'Отклонено поданых запросов - 0';
                },
//                isHidden: function(value, p, record) {
//                    return ((component.stage == 1 && (procedure.procedure_type!=PROCEDURE_TYPE_AUC_ASC && procedure.procedure_type!=PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 1 && procedure.application_stages==1 && (procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC)) || (component.stage == 2 && (procedure.procedure_type==PROCEDURE_TYPE_PERETORG_REDUC || procedure.procedure_type==PROCEDURE_TYPE_AUC_ASC || procedure.procedure_type==PROCEDURE_TYPE_AUC_DESC || procedure.procedure_type == PROCEDURE_TYPE_PRICELIST_REQ || (!Main.config.quotation_req_enable_first_parts && procedure.procedure_type == PROCEDURE_TYPE_QUOTATION_REQ)))) ? false : true;
//                },
           href: function(value, p, record) {
                    return String.format('#com/procedure/requestappliclist/activetab/3/procedure/{0}/supplier/{1}/application/{2}', component.proc_id, record.get('supplier_id'), record.get('app_id'));
                }
            }
        ]
        });
    }

    function displayOrderNumberAssigned(val, params, record) {
      var tip = '';
      if (val=='0') val = 'Не выбрано';
      else if (val=='-1') val = 'Не допущен';
      return val + tip;
    }
    var combo = new Application.components.combo({
      xtype: 'Application.components.combo',
      editable: false,
      hideLabel: true,
      triggerAction: 'all',
      store: orderNumberStore,
      disabledField: 'disabled',
      emptyText: 'Выберите...',
      valueField: 'id',
      displayField: 'display',
      mode: 'local',
      lazyRender: true,
      listClass: 'x-combo-list-small',
      forceSelection: true,
      width: 145,
      listeners: {
        afterrender: function () {
            var lotStep = component.procedure.lots[0].lot_step;
            if (component.procedure_type == PROCEDURE_TYPE_PRICE_REQUEST_ID ||
                (component.procedure_type == PROCEDURE_TYPE_AUCTION && lotStep == PSEUDO_STEP_CONTRACT_SUMARIZE)
            ) {
                this.setReadOnly(false);
            } else {
                this.setReadOnly(true);
            }
        },
        select: function () {
          var rowIndex = this.gridEditor.row + 1,
              value = this.getValue();
          if (value !== 0) {
              var isCommissionDecision = (value > 0);

              setFieldValue('commission_decision_yes_' + rowIndex, isCommissionDecision);
              setFieldValue('commission_decision_no_' + rowIndex, !isCommissionDecision);
          }
        }
      }
    });

    function rescanPlaces(oldvalue) {
      orderNumberStore.each(function(r){
        r.beginEdit();
        r.data.disabled = false;
          if (oldvalue == NO_MAGIC_NUMBER_MINUS_ONE && r.data.id != NO_MAGIC_NUMBER_MINUS_ONE) {
              r.data.disabled = true;
          } else if ((oldvalue != NO_MAGIC_NUMBER_MINUS_ONE && r.data.id == NO_MAGIC_NUMBER_MINUS_ONE) ||
              (r.data.id && r.data.id != oldvalue &&
              NO_MAGIC_NUMBER_MINUS_ONE != store.findExact('order_number_assigned', r.data.id))) {
              r.data.disabled = true;
          }
          r.endEdit();
      }, this);
      orderNumberStore.fireEvent('datachanged', orderNumberStore);
    }

    if(component.stage==2) {
      dataGridColumns.push({
        header: 'Место заявки,<br /> присвоенное комиссией',
        renderer: displayOrderNumberAssigned,
        css: 'background-color: #e5f6df;',
        width: 60,
        dataIndex: 'order_number_assigned',
        editor: combo
      });
    }

    var datagrid = new Ext.grid.EditorGridPanel({
        ref: 'applic_datagrid',
        store: store,
        clicksToEdit: 1,
        id: component.applic_grid_id,
        cls: 'spaced-fieldset thinborder',
        cm: new Ext.grid.ColumnModel({
          columns: dataGridColumns
        }),
        viewConfig: {
          forceFit:true
        },
        autoHeight: true,
        plugins: expander,
        hideTitle: true,
        listeners: {
          beforeedit: function(e) {
            rescanPlaces(e.value);
          }
        }
    });

    var dataMeet = {
      start_fake_date: '',
      start_fake_time: '',
      end_fake_date: '',
      end_fake_time: ''
    };

      var dateStart = (component.lot.date_start_zk) ? component.lot.date_start_zk : component.meetingDate,
          dateMomentsStart = moment(dateStart),
          timeMomentStart = Ext.util.Format.localDateRenderer(dateStart);
      dataMeet['start_fake_date'] = dateMomentsStart.toDate();
      dataMeet['start_fake_time'] = Application.components.poUtilDate.dateFormat(timeMomentStart, 'H:i');

    if (component.lot.date_end_zk) {
      var dateMomentsEnd = moment(component.lot.date_end_zk),
          timeMomentEnd = Ext.util.Format.localDateRenderer(component.lot.date_end_zk);
      dataMeet['end_fake_date'] = dateMomentsEnd.toDate();
      dataMeet['end_fake_time'] = Application.components.poUtilDate.dateFormat(timeMomentEnd, 'H:i');
    }
    Ext.apply(this, {
      title: component.title_names[protocol_type],  // alena POSPBA-208
      fileUpload: true,
      border: true,
      frame:true,
      width: 900,
      items: [
      {
        id: deadline_ends_cmp,
        border: false,
        hidden: true,
        bodyStyle: 'font-size: 12px'
      },
      {
        id: deadline_cmp,
        border: false,
        hidden: true,
        bodyStyle: 'font-size: 12px'
      },
      {
        border: false,
        html: '<div style="background-color: #C92100; padding: 10px; color: white">Согласно ч. 4 ст. 12 94-ФЗ в случае установления недостоверности сведений, содержащихся в документах, представленных заявителем в соответствии с частями 4 и 6 ст. 41.8 Закона, установления факта проведения ликвидации заявителя юр. лица или принятия арбитражным судом решения о признании заявителя - юридического лица банкротом и т.д., при условии, что заявитель не обжалует наличие указанной задолженности в соответствии с законодательством РФ, заказчик, УО обязаны отстранить такого участника от участия в конкурсе или процедуре на любом этапе их проведения. <b>Не используйте данный функционал для иных целей, так как это может являться поводом для жалобы в контролирующие органы</b></div>',
        hidden: (component.act!='decline'),
        bodyStyle: 'font-size: 12px'
      },
      {
        xtype: 'fieldset',
        title: 'Общие сведения о процедуре',
        //hideBorders: true,
        cls: 'spaced-fieldset',
        defaults: {bodyStyle: 'padding: 0px'},
        items: [{
          id: procedure_info_panel,
          hideTitle: true,
          border: false,
          cls: 'x-panel-mc',
          items: []
        }]
      },
        {
          xtype: 'fieldset',
          cls: 'spaced-fieldset',
          id: this.ids.protocol_information,
          title: 'Информация о протоколе',
          hidden: this.hideProtocols,
          items: [
            {
              xtype: 'fieldset',
              style: 'margin: 0; padding: 3px 0;',
              layout: 'column',
              border: false,
              defaults: {
                anchor: '100%'
              },
              items: [
                {
                  html: 'Регистрационный номер протокола'
                    + (!this.isProtocolRegisterNumberDisabled ? REQUIRED_FIELD : '') + ':',
                  width: 300
                },
                {
                  xtype: 'textfield',
                  name: 'protocol_register_number',
                  id: this.ids.protocol_register_number,
                  allowBlank: this.isProtocolRegisterNumberDisabled,
                  disabled: this.isProtocolRegisterNumberDisabled,
                  width: 300,
                  value: component.lot.protocol_register_number

                }
              ]
            },
            {
              xtype: 'fieldset',
              style: 'margin: 0; padding: 3px 0;',
              layout: 'column',
              border: false,
              readOnly: true,
              defaults: {
                anchor: '100%'
              },
              listeners: {
                afterrender: function(comp) {
                  var onChangeFnk = function (field, newValue, oldValue) {
                    if (newValue != oldValue && !Ext.isEmpty(newValue)) {
                      comp.onChange(field, newValue, oldValue, comp);
                    }
                  };
                  comp.dateStartZk.addListener('change', onChangeFnk);
                  comp.timeStartZk.addListener('change', onChangeFnk);
                  comp.onChange(null, null, null, comp);
                }
              },
              onChange: function(field, newValue, oldValue, comp) {
                var date = comp.dateStartZk.getValue();
                var time = comp.timeStartZk.getValue();

                if (date && time && typeof time == 'string' && /:/.test(time)) {
                  var timeArr = time.split(':');
                  date.setHours(timeArr[0], timeArr[1]);
                  date = moment(date);
                  comp.ZKDateTimeStart.setValue(date.toISOString());
                }
              },
              items: [
                {
                  html: 'Дата и время начала заседания комиссии'
                    + (!this.isDateStartZKDisabled ? REQUIRED_FIELD : '') + ':',
                  width: 300
                },
                {
                  xtype: 'Application.components.dateField',
                  altFormats: 'c|d.m.Y H:i:s|d.m.Y H:i',
                  allowBlank: this.isDateStartZKDisabled,
                  disabled: this.isDateStartZKDisabled,
                  id: this.ids.date_start_zk,
                  name: 'date_start_zk',
                  ref: 'dateStartZk',
                  width: 100,
                  format: 'd.m.Y',
                  value: dataMeet['start_fake_date'],
                  listeners: {
                    valid: function() {
                      component.isValidDataMeet(this);
                    }
                  }
                },
                {
                  html: '&nbsp',
                  width: 20
                },
                {
                  xtype: 'timefield',
                  allowBlank: this.isDateStartZKDisabled,
                  disabled: this.isDateStartZKDisabled,
                  id: this.ids.time_start_zk,
                  name: 'time_start_zk',
                  ref: 'timeStartZk',
                  width: 60,
                  format: 'H:i',
                  value: dataMeet['start_fake_time'],
                  listeners: {
                    valid: function() {
                      component.isValidTimeMeet(this);
                    }
                  }
                }, {
                  ref:'ZKDateTimeStart',
                  xtype: 'hidden',
                  name: 'zk-date-time-start'
                 }
              ]
            },
            {
              xtype: 'fieldset',
              style: 'margin: 0; padding: 3px 0;',
              layout: 'column',
              border: false,
              defaults: {
                anchor: '100%'
              },
              listeners: {
              afterrender: function(comp) {
                  var onChangeFnk = function (field, newValue, oldValue) {
                    if (newValue != oldValue && !Ext.isEmpty(newValue)) {
                      comp.onChange(field, newValue, oldValue, comp);
                    }
                  };
                  comp.dateEndZk.addListener('change', onChangeFnk);
                  comp.timeEndZk.addListener('change', onChangeFnk);
                  comp.onChange(null, null, null, comp);
                }
              },
              onChange: function(field, newValue, oldValue, comp) {
                var date = comp.dateEndZk.getValue();
                var time = comp.timeEndZk.getValue();

                if (date && time && typeof time == 'string' && /:/.test(time)) {
                  var timeArr = time.split(':');
                  date.setHours(timeArr[0], timeArr[1]);
                  date = moment(date);
                  comp.ZKDateTimeEnd.setValue(date.toISOString());
                }
              },
              items: [
                {
                  html: 'Дата и время окончания заседания комиссии'
                    + (!this.isDateEndZKDisabled ? REQUIRED_FIELD : '') + ':',
                  width: 300
                },
                {
                  xtype: 'Application.components.dateField',
                  altFormats: 'c|d.m.Y H:i:s|d.m.Y H:i',
                  allowBlank: this.isDateEndZKDisabled,
                  disabled: this.isDateEndZKDisabled,
                  id: this.ids.date_end_zk,
                  name: 'date_end_zk',
                  ref: 'dateEndZk',
                  width: 100,
                  format: 'd.m.Y',
                  value: dataMeet['end_fake_date'],
                  listeners: {
                    valid: function() {
                      component.isValidDataMeet(this);
                    }
                  }
                },
                {
                  html: '&nbsp',
                  width: 20
                },
                {
                  xtype: 'timefield',
                  allowBlank: this.isDateEndZKDisabled,
                  disabled: this.isDateEndZKDisabled,
                  id: this.ids.time_end_zk,
                  name: 'time_end_zk',
                  ref: 'timeEndZk',
                  width: 60,
                  format: 'H:i',
                  value: dataMeet['end_fake_time'],
                  listeners: {
                    valid: function() {
                      component.isValidTimeMeet(this);
                    }
                  }
                }, {
                  ref:'ZKDateTimeEnd',
                  xtype: 'hidden',
                  name: 'zk-date-time-end'
                }]
            }
          ]
        },
      {
        xtype: 'Application.components.CommissionForm',
        id: component.commission_form_id,
        hidden: is_autoprotocol,
        title: 'Сведения о комиссии',
        commissionId: component.commissionId,
        expander: expander,
        listeners: {
          render: function() {
            this.relayEvents(component, ['applic_reviewlist_loaded']);
          }
        }
      },
      {
        xtype: 'Application.components.LotExtendedApplicRegistrationPanel',
        hidden: !Main.config.extended_applic_registration_quotation,
        title: 'Расширенная подача заявок',
        style: 'margin-left: 10px; margin-right: 10px;',
        listeners: {
          render: function() {
            this.relayEvents(component, ['applic_reviewlist_loaded']);
          }
        }
      },
      {
        xtype: 'button',
        text: 'Скачать заявки в виде архива',
        style: 'padding-left: 10px',
        id: archive_applic_id,
        hidden: ([1,2].indexOf(component.stage)>=0 && Main.config.download_all_applics ? false : true),
        handler: function() {
          var url = '/Applic/getzipbylot';
          var params = {
            lot_id: component.lot_id,
            stage: component.stage,
            format: 'htmljson'
          };
          var dparams = {
            handle_failure: true,
            download: true,
            wait_disable: true
          };
          performAjaxRPCCall(url, params, dparams, echoResponseMessage);
        }
      },
      datagrid,
      {
        id: autogenerated_file_id,
        xtype: 'panel',
        //hideBorders: true,
        border: false,
        cls: 'spaced-panel',
          ref: 'protocolFilePanel',
        items: [{
          title: component.protocol_names[protocol_type],
          xtype: 'fieldset',
          id: this.ids.is_autoprotocol_id,
          bodyStyle: 'padding: 0 3px',
          cls: 'spaced-fieldset',
          items: [{
            html: is_autoprotocol
              ?'Вы можете скачать автоматически сформированный протокол для последующего использования и публикации на площадке, либо опубликовать собственный протокол, либо оставить автоматический протокол.'
              :'Вы можете скачать сформированный на основе указанных вами решений протокол для последующего использования и публикации на площадке, либо опубликовать собственный протокол.'
          }],
          buttons: [{
            text: 'Скачать',
            hidden: is_autoprotocol,
            handler: function() {
              if (component.getForm().isValid() && component.isValidApplicationsData()) {
                datagrid.getStore().save();
                performSave(component, null, 'goDownloadProtocol', false, false);
              }
            }
          },{
            text: 'Скачать Проект решения',
            hidden: false,
            id: download_consideration_draft_decision_id,
            handler: function() {
              if (component.getForm().isValid() && component.isValidApplicationsData()) {
                datagrid.getStore().save();
                performSave(component, null, 'goDownloadConsiderationDraftDecision', false, false);
              }
            }
          },{
            text: 'Скачать Проект решения',
            hidden: false,
            id: download_comparison_draft_decision_id,
            handler: function() {
              if (component.getForm().isValid() && component.isValidApplicationsData()) {
                datagrid.getStore().save();
                performSave(component, null, 'goDownloadComparisonDraftDecision', false, false);
              }
            }
          },{
            text: 'Скачать Проект решения',
            hidden: false,
            id: consideration_and_summing_draft_decision_id,
            handler: function() {
              if (component.getForm().isValid() && component.isValidApplicationsData()) {
                datagrid.getStore().save();
                performSave(component, null, 'goDownloadConsiderationSummingDraftDecision', false, false);
              }
            }
          }]
        }]
      },
      {
        id: autogenerated_list_file_id,
        xtype: 'panel',
        border: false,
        cls: 'spaced-panel',
        hidden: true,
        ref: 'admittedSuppliersPanel',
        items: [{
          title: 'Список допущенных участников',
          xtype: 'fieldset',
          bodyStyle: 'padding: 0 3px',
          cls: 'spaced-fieldset',
          items: [{
            html: 'Список допущенных участников'
          }],
          buttons: [{
            text: 'Скачать',
            hidden: is_autoprotocol,
            handler: function() {
              if (component.getForm().isValid() && component.isValidApplicationsData()) {
                datagrid.getStore().save();
                performSave(component, null, 'goDownloadListProtocol', false, false);
              }
            }
          }]
        }]
      },
      {
        xtype: 'hidden',
        name: 'stage',
        value: component.stage
      },
      {
        xtype: 'hidden',
        name: 'lot_id',
        value: component.lot_id
      }
      ],
      buttons: [
          {
        ref: '../buttonSaveDraft',
        text: 'Сохранить как черновик',
        hidden: is_autoprotocol || Main.config.common_applic_stages,
        handler: function() {
          if (component.getForm().isValid() && component.isValidApplicationsData()) {
            if (!is_autoprotocol) {
              datagrid.getStore().save();
            }
            performSave(component, null, 'reloadFilePanels');
            return true;
          }
          return false;
        }
      },
          {
        text: 'Подписать и направить',
        hidden: is_autoprotocol,
        handler: function() {
            if (component.buttonSaveDraft.handler()) {
                performRPCCall(
                    RPC_po.Commission.saveBaseParamProtocol,
                    [component.getForm().getValues()],
                    {}, function(resp) {
                        if (!resp || !resp.success) {
                            echoResponseMessage(resp);
                        } else {
                            if (!is_autoprotocol) {
                                datagrid.getStore().save();
                            }
                            component.save(component);
                        }
                    }
                );
            }
        }
      },
          {
        text: 'Заменить файл протокола на приложенный',
        hidden: !is_autoprotocol,
        handler: function() {
          var file = Ext.getCmp(component.fileFieldsetId);
          if (file.isFileAttached()) {
            performSave(component, null, 'reloadFilePanels', true, false);
          } else {
            Ext.Msg.alert('Ошибка', 'Необходимо выбрать файл для замены');
          }
        }
      }],
      listeners: {
        beforerender: function() {
// alena POSPBA-208 чтобы можно было прописать другой action в наследуемых формах -->--
//          performRPCCall(RPC.Applic.reviewlist, [{lot_id: component.lot_id, stage: component.stage}], {wait_delay: 0, wait_text: 'Загружаются заявки. Подождите...'}, function(result) {
//            if (result.success) {
          component.loadApplicReviewList();
        },
//        alena POSPBA-208 --<--  
        loadedApplicReviewList: { fn : function(result) {
              lot = result.lot;
              procedure = result.procedure;
              component.procedure = procedure;
              var lot_step = procedure.lots[0].lot_step;
              //combo.readOnly = Main.config.common_applic_stages || procedure.lots[0].lot_step == Main.config.common_applic_stages_for_step;
              if(Main.config.show_predqualification_user_list &&
                (procedure.procedure_type == PROCEDURE_TYPE_PREQUALIFY_SELECTION || procedure.procedure_type == PROCEDURE_TYPE_PAPER_PREQUALIFY_SELECTION)
                ){
                this.admittedSuppliersPanel.show();
              }
          
              if (procedure.lots[0].lot_step == Main.config.common_applic_stages_for_step) {
                this.buttonSaveDraft.hide();
              }

              component.procedure_type = procedure.procedure_type; // alena 3846
              base_procedure = result.base_procedure;
              component.proc_id = procedure.id;

              if (lot.date_published) procedure.date_published = lot.date_published;
              if (lot.date_end_registration) procedure.date_end_registration = lot.date_end_registration;
              if (lot.date_applic_opened) procedure.date_applic_opened = lot.date_applic_opened;
              procedure.registry_number = procedure.registry_number+', лот № '+lot.number;
              Ext.getCmp(procedure_info_panel).update(component.getProcTpl/*getProcedureDataTemplate().apply*/(Ext.apply(base_procedure)));
              commission_selected = result.commission_selected;
              commission_decision = result.commission_decision;
              component.fireEvent('applic_reviewlist_loaded', result);

              var now = new Date(), tmp, last_date, days;
              if (component.stage == 1) {
                tmp = lot.date_end_first_parts_review;
                if (!tmp) tmp = lot.date_begin_auction;
                last_date = parseDate(tmp);
                if (last_date) {
                  Ext.getCmp(deadline_ends_cmp).update('<div style="background-color: #C92100; padding: 10px; color: white"><b>Крайний срок публикации результатов рассмотрения заявок <u>истёк</u> '+last_date.format('d.m.Y')+'</b></div>');
                  Ext.getCmp(deadline_cmp).update('<div style="background-color: #C92100; padding: 10px; color: white"><b>Крайний срок публикации результатов рассмотрения заявок '+last_date.format('d.m.Y')+'</b></div>');
                  Ext.getCmp(deadline_ends_cmp).setVisible(now>last_date);
                  Ext.getCmp(deadline_cmp).setVisible(now<=last_date);
                }
              } else {
                /*tmp = lot.date_end_second_parts_review;
                if (!tmp) tmp = lot.date_end_auction;
                last_date = parseDate(tmp);
                Ext.getCmp(deadline_ends_cmp).update('<div style="background-color: #C92100; padding: 10px; color: white"><b>Крайний срок публикации результатов подведения итогов <u>истёк</u> '+last_date.format('d.m.Y')+'</b></div>');
                Ext.getCmp(deadline_cmp).update('<div style="background-color: #C92100; padding: 10px; color: white"><b>Крайний срок публикации результатов подведения итогов '+last_date.format('d.m.Y')+'</b></div>');
                Ext.getCmp(deadline_ends_cmp).setVisible(lot.status==7);
                Ext.getCmp(deadline_cmp).setVisible(lot.status==6);
                */
              }



            if ((component.procedure_type != PROCEDURE_TYPE_AUCTION) && (lot_step != PSEUDO_STEP_CONTRACT_SUMARIZE)) {
                order_number_assign_array.push([NO_MAGIC_NUMBER_MINUS_ONE, 'Не допущен', false]);
            }

            var isCalculatePlaces = true;
            for (var i = 0; i < result.applications.length; ++i) {
                order_number_assign_array.push([i + 1, i + 1, result.applications[i]['order_number_assigned'] > 0]);
                if (result.applications[i]['order_number_assigned'] != 0) {
                    isCalculatePlaces = false;
                }
            }

              orderNumberStore.loadData(order_number_assign_array);

              component.applications = result.applications;
              store.loadData({applics: result.applications});
              
              if (component.isCanApplicationsPlaceSave() && result.places && isCalculatePlaces) {
                   component.places = result.places;
                   component.fireEvent('calculatePlaces');
                    datagrid.getStore().save();
              }
              
              if(procedure.send_to_oos && result.oos_types) {
                  oos_type_store.loadData({rows: result.oos_types});
              }

              component.showOosFields();
              component.fireEvent('reloadFilePanels');

              var cm = datagrid.getColumnModel();
              if (component.stage==2 && (procedure.procedure_type == Application.models.Procedure.type_ids.auction_up
                    || procedure.procedure_type == Application.models.Procedure.type_ids.auction_down) &&
                  lot_step != PSEUDO_STEP_CONTRACT_SUMARIZE) {
                // прячем колонку с итоговым ранжем у ауков-редуков на подведении итогов
                cm.setHidden(cm.getColumnCount()-1, true);
              }
              if ((Application.models.Procedure.type_ids.qualification == procedure.procedure_type &&
                  component.stage != NO_MAGIC_NUMBER_SIX) ||
                  (component.stage == NO_MAGIC_NUMBER_TWO &&
                  (Application.models.Procedure.type_ids.auction_down == procedure.procedure_type ||
                  Application.models.Procedure.type_ids.auction_up == procedure.procedure_type))
              ) {
                cm.setHidden(2, true);
              }
              if (component.stage==2 && procedure.application_stages==1 && (procedure.procedure_type == Application.models.Procedure.type_ids.auction_up
                    || procedure.procedure_type == Application.models.Procedure.type_ids.auction_down)) {
                component.setTitle('Рассмотрение и допуск заявок');
                    if (lot_step == PSEUDO_STEP_CONTRACT_SUMARIZE) {
                        component.setTitle('Подведение итогов');
                        cm.setHidden(NO_MAGIC_NUMBER_TWO, false);
                    }
              }

              if (component.stage == 1 && procedure.procedure_type != Application.models.Procedure.type_ids.public_sale) {
                var colIndex = cm.findColumnIndex('supplier');
                if (colIndex && colIndex > 0)
                  cm.setHidden(colIndex, true);
              }

              // 3846: Форма "Рассмотрение заявок". Первый вариант
              // dmip 2014-02-19
              // Блок кода закоментирован, т.к. теперь для бумажных процедур заказчик может заводить заявки, формировать протоколы и т.д.
              if (Application.models.Procedure.groups.paper_forms.indexOf(procedure.procedure_type) >= 0
              // -->-- alena 3846 не скрывать эти блоки, если разрешено заводить заявки поставщиков, формировать протоколы и т.д.
                  && !Main.config.allow_customer_add_applic) {
                var comissionForm = Ext.getCmp(commission_form_id);
                if (comissionForm) {
                  comissionForm.hide();
                }

                var autogeneratedFile = Ext.getCmp(autogenerated_file_id);
                if (autogeneratedFile) {
                  autogeneratedFile.hide();
                }
                var archiveApplic = Ext.getCmp(archive_applic_id);
                if (archiveApplic) {
                  archiveApplic.hide();
                }
                datagrid.hide();
              }

              if (component.stage == 2 && procedure.procedure_type == Application.models.Procedure.type_ids.public_sale) {
                var comissionForm = Ext.getCmp(commission_form_id);
                if (comissionForm) {
                  comissionForm.hide();
                }
                datagrid.hide();
              }
              
              var lot_step = this.procedure.lots[0].lot_step;
              if(lot_step != 'consideration_applications' ){ 
                var download_consideration_draft_decision_button = Ext.getCmp(download_consideration_draft_decision_id);
                if (download_consideration_draft_decision_button) {
                  download_consideration_draft_decision_button.hide();
                }
              }
              else
              {
                  /*отправка на повторную коммиссию при условии отсутсвия заявок,присутствии одной или решения комисии на стадии Рассмотрения заявок*/
                  /*if(result.applications.length == 0 || result.applications.length == 1)
                  {
                      Ext.getCmp('fsAllowToSendAgainOption').show();
                  }
                  if(result.applications.length >= 2)
                  {
                      for (var i=0; i<result.applications.length; ++i)
                      {
                          console.log(Ext.getCmp('commission_decision_yes_' + result.applications[i]['id']).getValue());
                          console.log(Ext.getCmp('commission_decision_no_' + result.applications[i]['id']).getValue());
                      }
                  }*/

              }

              if(lot_step != 'summing_up' ){ 
                var download_comparison_draft_decision_button = Ext.getCmp(download_comparison_draft_decision_id);
                if (download_comparison_draft_decision_button) {
                  download_comparison_draft_decision_button.hide();
                }
              }

              if(lot_step != 'consideration_and_summing' ){ 
                var consideration_and_summing_draft_decision_button = Ext.getCmp(consideration_and_summing_draft_decision_id);
                if (consideration_and_summing_draft_decision_button) {
                  consideration_and_summing_draft_decision_button.hide();
                }
              }



                  
                  
                  
// alena POSPBA-208 -->-- перенесла в loadApplicReviewList
//            } else {
//              echoResponseMessage(result);
//              redirect_to(this.module + '/procedure/index');
//            }
//          }); --<-- alena POSPBA-208
        },
          scope: this
        },
        reloadFilePanels: function() {
          component.remove(Ext.getCmp(component.fileFieldsetId));
          component.fileFieldsetId = Ext.id();
          component.remove(Ext.getCmp(otherFileFieldsetId));
          otherFileFieldsetId = Ext.id();
          loadApplicationReviewFiles();
        },
        calculatePlaces: function () {
          function sortFloat(a, b) { 
            return a.price - b.price;
          };

          var not_sorted_places = component.places;
          not_sorted_places.sort(sortFloat);
          var sorted_places = not_sorted_places;
          var place_id = 1;
          
          var place_not_allowed = -1;
          
          for (i = 0, n = sorted_places.length; i < n; ++i) {
            
            var item = store.getById(sorted_places[i].app_id);

            var current_place = place_id;
            if ( sorted_places[i].date_rejected) {
              current_place = place_not_allowed;
            }

            item.set('order_number_assigned', current_place);
            if(current_place == -1){
              continue;
            }
            place_id = place_id + 1;
          }

        },
        goDownloadProtocol: function() {
          var commission_id = parseInt(Ext.getCmp(commission_form_id).getCommissionValue());
          if (!commission_id) {
            commission_id = -1;
          }
            window.location = component.downloadHref + '/lot/' + component.lot_id + '/commission/' + commission_id +
                '/stage/' + component.stage + '/meetingId/' + component.meetingId;
        },
        goDownloadConsiderationDraftDecision: function() {
          window.location = component.downloadConsiderHref + '/id/'+component.lot_id;
        },
        goDownloadComparisonDraftDecision: function() {
          window.location = component.downloadComparisonHref + '/id/'+component.lot_id;
        },
        goDownloadConsiderationSummingDraftDecision: function() {
          window.location = component.downloadConsiderationSummingHref + '/id/'+component.lot_id;
        },
        goDownloadListProtocol: function() {
          var commission_id = parseInt(Ext.getCmp(commission_form_id).getCommissionValue());
          if (!commission_id) {
            commission_id = -1;
          }
          window.location = component.downloadListHref + '/lot/'+component.lot_id+'/commission/'+commission_id+'/stage/'+component.stage;
        },
        goSignProtocolPage: function(resp) {
          var sign_url = this.module + '/protocol/signprotocol/lot/'+component.lot_id+'/stage/'+component.stage;
          if (component.meetingId) {
            sign_url += '/meetingId/' + component.meetingId;
          }
          if (component.act && component.act=='decline') sign_url += '/act/'+component.act;

            if(component.applications.length == 0 || component.applications.length == 1)
            {
                sign_url += '/double_proc/1';
            }
            if(component.applications.length >= 2)
            {
                var cntApps = component.applications.length;
                var cntDeclained = 0;
                for (var i=0; i<cntApps; ++i)
                {
                    if(Ext.getCmp('commission_decision_no_' + component.applications[i]['id']) != undefined)
                    {
                        if(Ext.getCmp('commission_decision_no_' + component.applications[i]['id']).getValue())
                            cntDeclained++;
                    }
               }
               if(cntApps == cntDeclained)
                   sign_url += '/double_proc/1';
            }

          if (resp.result.success && component.stage==2 && resp.result.showAllButton) {
            sign_url += '/showall/1';
          }
          redirect_to(sign_url);
        }
      }
    });

    Application.components.applicationsReviewForm.superclass.initComponent.call(this);

    this.form.api = component.getFormApi();//{ // alena POSPBA-208 возможность прописать другой action
//      submit: RPC.Applic.saveReviewApplication
//    };
    this.form.waitMsgTarget = true;

  }
// alena POSPBA-208 -->--
  ,getFormApi: function(){
    return {
      submit: RPC.Applic.saveReviewApplication
    };
  }

  ,getProcTpl: function(procedure){
     return getProcedureDataTemplate().apply(procedure);
  }
  
  ,setValues: function(v) {
    setComponentValues(this, v, true);
  }

  ,loadApplicReviewList: function(){
    var component = this;
    performRPCCall(RPC.Applic.reviewlist, [{lot_id: component.lot_id, stage: component.stage}], {wait_delay: 0, wait_text: 'Загружаются заявки. Подождите...'}, function(result) {
      if (result.success) {
        component.fireEvent('loadedApplicReviewList', result);
      } else {
        echoResponseMessage(result);
        redirect_to(component.module + '/procedure/index');
      }
    });
  }
  ,addFilesPanel: function(component,protocol_type){
    component.add({
        xtype: 'Application.components.FilesPanel',
        id: component.fileFieldsetId,
        border: false,
        ref: 'protocolFilePanel',
        file_panels: [{
          name: component.protocol_names[protocol_type],
          xtype: 'fieldset',
          withDescr: false,
          descr: '<p style="margin: 0px; font-size: 7pt;"><b>Актуальным может быть только один файл протокола.</b> Если ваш документ многостраничный, то размещайте сканы в архиве, либо в документ Word.</p>',
          req_id: 1
        }]
      });
  }
  ,getTableLayoutPanel: function(col_cnt, hideBorder, hdrs) {
      var p = new Ext.Panel({
        labelWidth: 400,
        layout: 'table',
        layoutConfig: {columns: col_cnt},
        bodyCssClass: (undefined === hideBorder || hideBorder) ? 'cleanborder' : 'displayborder',
        defaults: {
          border: false,
          bodyCssClass: 'cleanborder'
        },
        cls: 'spaced-bottom',
        items: []
      });
      
      if (hdrs) {
        p.add(hdrs);
      }
      return p;
  }

  ,createPanel1forExpander: function(component, record, commission_members, procedure) {
    var comboValues = new Ext.data.ArrayStore({
      fields: ['id', 'title'],
      data: [['1', 'Допущен'], ['0', 'Не допущен']]
    });

    var numbers_assigned = [['-1', 'Не выбрано', false]];
    if(procedure.procedure_type != Application.models.Procedure.type_ids.contest) {
    numbers_assigned.push([0, 'Не допущен', false]);
    }

    var decision_box_title = component.title_names['panel1_stage1'];
    if (component.stage == 2) {
      for (i = 0; i < component.applications.length; ++i) {
        numbers_assigned.push([i + 1, i + 1, false]);
      }
      decision_box_title = component.title_names['panel1_stage2'];
    }

    if (procedure.procedure_type == Application.models.Procedure.type_ids.contest) {
      decision_box_title = 'Решение членов комиссии о месте заявки';
    }
    var currentStep = this.procedure.lots[0].lot_step;
    var panel = new Ext.Panel({
      frame: true,
      bodyCssClass: 'cleanborder',
      title: decision_box_title,
      //cls: 'spaced-bottom',
      items: []
    });
    var decisionHtml;
    if (Main.config.applications_rewiew_batch_combo) {
      var recordId = record.get('id');
      var commissionFormId = "'" + component.commission_form_id + "'";
      decisionHtml = '<a' +
        ' class="applic-review-decision-title" href="javascript:void(0);" ' +
        'onclick=' +
        '"Application.components.applicationsReviewForm.prototype.onClickListener(event,'
        + recordId + ', ' + commissionFormId + ');"' +
        ' data-appId=' + record.get('id') + ' data-commissionFormId=' + component.commission_form_id + '>' +
        '<b>Решение члена комиссии</b></a>';
    } else {
      decisionHtml = '<b>Решение члена комиссии</b>';
    }
    
    var is_reason_decision_title_hidden = false;
    
    if(component.stage == 2 
            && (procedure.procedure_type==Application.models.Procedure.type_ids.contest || procedure.procedure_type==Application.models.Procedure.type_ids.paper_contest) ){
      is_reason_decision_title_hidden = true;
    }
    
    var headers = [{
        cellCls: 'th_width_150',
        html: '<b>Член комиссии</b>'
      }, {
        cellCls: 'th_width_150',
        html: '<b>Роль</b>'
      }, {
        cellCls: 'th_width_150',
        id: 'decision_title' + record.get('id'),
        html: decisionHtml
    }, {
        style: 'padding-top: 5px',
        id: 'reason_decision_title' + record.get('id'),
        hidden: is_reason_decision_title_hidden,
        html: '<b>Основание отказа в допуске к участию в процедуре</b>'
      }];
    var member_id;
    if (commission_members) {
      for (var i = 0; i < commission_members.length; ++i) {

        if (!commission_members[i].can_vote) {
          continue;
        }

        var placeStore = new Ext.data.ArrayStore({
          fields: ['id', 'display', 'disabled'],
          data: numbers_assigned
        });
        var member_id = commission_members[i].id;
        component.members_places[member_id] = [];
        var panel1 = component.getTableLayoutPanel(4, true, (0 === i ? headers : null));
        if (!Ext.getCmp('member_attended_' + member_id).getValue())
          continue;
        panel1.add({
          cellCls: 'th_width_150',
          html: commission_members[i].name
        });
        panel1.add({
          cellCls: 'th_width_150',
          html: commission_members[i].role
        });

          var basis_text_yes = 'Состав документов заявителя соответствует требованиям документации';
        if ((component.stage === 2) && !(Main.config.common_applic_stages || procedure.lots[0].lot_step == Main.config.common_applic_stages_for_step) // alena POSPBA-366
            && -1 === Application.models.Procedure.groups.auctions.indexOf(procedure.procedure_type)
           ) {
// alena не является аукционом          
//                procedure.procedure_type != Application.models.Procedure.type_ids.auction_up
//                && procedure.procedure_type != Application.models.Procedure.type_ids.auction_down) {
          panel1.add({
            cellCls: 'th_width_150',
            xtype: 'Application.components.combo',
            id: 'decision_' + record.get('id') + '_' + member_id,
            hiddenName: 'decision[' + record.get('app_id') + '][' + member_id + ']',
            disabledField: 'disabled',
            editable: false,
            hideLabel: true,
            triggerAction: 'all',
            store: placeStore,
            valueField: 'id',
            displayField: 'display',
            mode: 'local',
            memberId: member_id,
            value: '-1',
              stateful: true,
              stateId: 'decision_' + component.stage + '_' + component.lot_id + '_' +
                record.get('app_id') + '_' + member_id,
              getState: function() {
                  return {value: this.getValue()};
              },
            lazyRender: true,
            listClass: 'x-combo-list-small',
            forceSelection: true,
            width: 145,
            listeners: {
              beforeselect: function(combo, record) {
                  var curState = this.getState();
                  curState.value = record.data.id;
                  Ext.state.Manager.set(this.stateId, curState);
              },
              select: function(combo) {
                var id, cmp, member_id = combo.memberId, i, v, s;
                var places = [];
                var combo_id = this.getId();
                if (this.value == 0) {
                  Ext.getCmp('reason_' + combo_id).setReadOnly(false);
                  if (Ext.getCmp('reason_' + combo_id).getValue() == basis_text_yes) {
                      setFieldValue('reason_' + combo_id, '');
                  }
                } else {
                  Ext.getCmp('reason_' + combo_id).setReadOnly(true);
                  setFieldValue('reason_' + combo_id, basis_text_yes);
                }
                // обновляем список выбранных мест этим членом комиссии
                for (i = 0; i < component.applications.length; ++i) {
                  id = component.applications[i].id;
                  cmp = Ext.getCmp('decision_' + id + '_' + member_id);
                  if (cmp && cmp.getValue() > 0) {
                    places.push(cmp.getValue());
                  }
                }

                // обновляем дизаблы
                for (i = 0; i < component.applications.length; ++i) {
                  id = component.applications[i].id;
                  cmp = Ext.getCmp('decision_' + id + '_' + member_id);
                  if (cmp) {
                    v = cmp.getValue();
                    s = cmp.getStore();
                    s.each(function(r) {
                      var disable = false;
                      if (r.data.id > 0 && v != r.data.id && places.indexOf(r.data.id) >= 0) {
                        disable = true;
                      }
                      if (disable != r.data.disabled) {
                        r.beginEdit();
                        r.data.disabled = disable;
                        r.endEdit();
                      }
                    });
                    s.fireEvent('datachanged', s);
                  }

                  // ставим итоговые галочки автоматом, если все допустили заявку
                  component.updateApplicationsDecision(record, commission_members);
                }
              },
              render: function() {
                var combo_id = this.getId();
                if (procedure.procedure_type == Application.models.Procedure.type_ids.contest || procedure.procedure_type==Application.models.Procedure.type_ids.paper_contest) {
                  Ext.getCmp('reason_' + combo_id).hide();
                } else {
                  if (this.getValue() == 0) {
                    Ext.getCmp('reason_' + combo_id).setReadOnly(false);
                      if (Ext.getCmp('reason_' + combo_id).getValue() == basis_text_yes) {
                          setFieldValue('reason_' + combo_id, '');
                      }
                  } else {
                    Ext.getCmp('reason_' + combo_id).setReadOnly(true);
                      setFieldValue('reason_' + combo_id, basis_text_yes);
                  }
                }
                this.fireEvent('select', this);
              }
            }
          });
        } else {
          panel1.add({
            cellCls: 'th_width_150',
            xtype: 'combo',
            id: 'decision_' + record.get('id') + '_' + member_id,
            hiddenName: 'decision[' + record.get('app_id') + '][' + member_id + ']',
            editable: false,
            hideLabel: true,
            triggerAction: 'all',
            store: comboValues,
            valueField: 'id',
            displayField: 'title',
            mode: 'local',
            value: 0,
              stateful: true,
              stateId: 'decision_' + component.stage + '_' + component.lot_id + '_' +
                record.get('app_id') + '_' + member_id,
              getState: function() {
                  return {value: this.getValue()}
              },
            lazyRender: true,
            listClass: 'x-combo-list-small',
            forceSelection: true,
            width: 145,
            listeners: {
              beforeselect: function(combo, record) {
                  var curState = this.getState();
                  curState.value = record.data.id;
                  Ext.state.Manager.set(this.stateId, curState);
              },
              select: function() {
                var combo_id = this.getId();
                if(component.stage == 2 && (procedure.procedure_type == Application.models.Procedure.type_ids.contest || procedure.procedure_type==Application.models.Procedure.type_ids.paper_contest)){
                      Ext.getCmp('reason_' + combo_id).hide();
                } else {
                  if (this.value == 0) {
                    Ext.getCmp('reason_' + combo_id).setReadOnly(false);
                      if (Ext.getCmp('reason_' + combo_id).getValue() == basis_text_yes) {
                          setFieldValue('reason_' + combo_id, '');
                      }
                  } else {
                    Ext.getCmp('reason_' + combo_id).setReadOnly(true);
                      setFieldValue('reason_' + combo_id, basis_text_yes);
                  }
                }

                component.updateApplicationsDecision(record, commission_members);
              },
              render: function() {
                this.fireEvent('select');
              }
            }
          });
        }
        
        panel1.add({
          hideLabel: true,
          xtype: 'textarea',
          width: '97%',
          allowBlank: false,
          id: 'reason_decision_' + record.get('id') + '_' + member_id,
          style: 'margin-bottom: 4px',
          name: 'reason[' + record.get('app_id') + '][' + member_id + ']',
          height: 50,
            stateful: true,
            stateId: 'reason_decision_' + component.stage + '_' + component.lot_id + '_' +
                record.get('app_id') + '_' + member_id,
            stateEvents: ['blur'],
            getState: function() {
                return {value: this.getValue()};
            }
        });
        panel.add(panel1);
      }
    }
    return panel;
  }
  
  ,createPanel2forExpander: function(component, record) {
    hideP3 = function(h,i){
      var p3 = Ext.getCmp('panel3_' + i);
      if (p3){
        if(h) {
          p3.hide();
        }else{
          p3.show();
        }
      }
    };
    var lotStep = component.procedure.lots[0]['lot_step'];
    return new Ext.Panel({
          frame: true,
          title: 'Общее решение комиссии по допуску участника',
          labelWidth: 400,
          layout: 'form',
            hidden: (component.procedure_type == PROCEDURE_TYPE_CONTEST_ID &&
                component.stage == NO_MAGIC_NUMBER_TWO &&
                record.get('accepted') == NO_MAGIC_NUMBER_ONE),
          bodyCssClass: 'cleanborder',
          defaults: {
            border: false,
            bodyCssClass: 'cleanborder'
          },
          bodyStyle: 'padding-left: 4px',
          style: {marginBottom: '10px'},
          items: [{
            xtype: 'checkbox',
            id: 'commission_decision_yes_'+record.get('id'),
            boxLabel: 'Допустить заявителя к участию в процедуре',
            hideLabel: true,
            name: 'commission_decision[' + record.get('app_id') + ']',
            inputValue: '1',
              stateful: true,
              stateId: 'commission_decision_yes_' + component.stage + '_' +
                component.lot_id + '_' + record.get('app_id'),
              stateEvents: ['check'],
              getState: function() {
                  return {checked: this.getValue()}
              },
            listeners: {
              check: function() {
                var basis_text_yes = 'Состав документов заявителя соответствует требованиям документации';
                var el = Ext.getCmp('basis_text_'+record.get('id'));
                if (this.checked) {

                  setFieldValue('commission_decision_no_' + record.get('id'), false);
                  
                  if (el.getValue() != basis_text_yes) {
                    setFieldValue('basis_text_' + record.get('id'), basis_text_yes);
                  }
                  hideP3(false,record.get('id'));

                  var curState = this.getState();
                  curState.checked = this.checked;
                  Ext.state.Manager.set(this.stateId, curState);

                  var timeout = 300;
                  setTimeout(function() {
                    component.updateApplicationsRating(component);
                  }, timeout);
                } else {
                  if (el.getValue() == basis_text_yes) {
                      setFieldValue('basis_text_' + record.get('id'), '');
                  }
                  hideP3(true,record.get('id'));
                }
              }
            }
          }, {
            xtype: 'checkbox',
            id: 'commission_decision_no_'+record.get('id'),
            boxLabel: 'Отказать в допуске к участию в процедуре',
            hideLabel: true,
            name: 'commission_decision[' + record.get('app_id') + ']',
            inputValue: '0',
              stateful: true,
              stateId: 'commission_decision_no_' + component.stage + '_' +
                component.lot_id + '_' + record.get('app_id'),
              stateEvents: ['check'],
              getState: function() {
                  return {checked: this.getValue()}
              },
            listeners: {
              check: function() {
                if (this.checked) {

                  if(Ext.getCmp('commission_decision_yes_'+record.get('id')).getValue()){
                    setFieldValue('commission_decision_yes_' + record.get('id'), false);
                  }
                  
                  hideP3(true,record.get('id'));

                  var curState = this.getState();
                  curState.checked = this.checked;
                  Ext.state.Manager.set(this.stateId, curState);

                  var timeout = 300;
                  setTimeout(function() {
                    component.updateApplicationsRating(component);
                  }, timeout);

                }else{
                  hideP3(false,record.get('id'));
                }
              }
            }
          }, {
            html: '<b>Основание для решения:</b>'
          }, {
            xtype: 'textarea',
            width: '98%',
            height: 50,
            allowBlank: false,
            id: 'basis_text_'+record.get('id'),
            name: 'basis_text[' + record.get('app_id') + ']',
            hideLabel: true,
            maxLength: 1000,
              enableKeyEvents: true,
              stateful: true,
              stateId: 'basis_text_' + component.stage + '_' + component.lot_id + '_' + record.get('app_id'),
              stateEvents: ['blur', 'change', 'keydown'],
              getState: function() {
                  return {value:this.getValue()};
              },
            listeners: {
              blur: function() {
                var commission_decision_yes = Ext.getCmp('commission_decision_yes_'+record.get('id'));
                var basis_text_yes = 'Состав документов заявителя соответствует требованиям документации';
                if (this.getValue() != basis_text_yes && commission_decision_yes.checked) {
                  setFieldValue('basis_text_' + record.get('id'), basis_text_yes);
                }
              }
            }
          }]
        });
  },

  createCriteriaPanel: function(component, record, commission_members, store) {
  },

  save: function (component) {
    performSave(component, null, 'goSignProtocolPage', true, false);
  },

  onClickListener: function (event, appRecordId, commissionThisFormId) {
    event = event || window.event;
    var target = Ext.get(event.currentTarget ? event.currentTarget : event.srcElement);
    if (appRecordId) {
      var appId = target.getAttribute('data-appId') || appRecordId;
      var commissionFormId = target.getAttribute('data-commissionFormId') || commissionThisFormId;
      var commissionForm = Ext.getCmp(commissionFormId);
      var commissionMembers = commissionForm.getCommissionMembers();

      if (!commissionForm.commissioMembersEnable) {
        commissionForm.commissioMembersEnable = 0;
      }
      if (commissionForm.commissioMembersEnable === 0) {
        commissionForm.commissioMembersEnable = 1;
      } else {
        commissionForm.commissioMembersEnable = 0;
      }
      if (commissionMembers) {
        for (var i = 0; i < commissionMembers.length; ++i) {
            setFieldValue('decision_' + appId + '_' + commissionMembers[i].id, commissionForm.commissioMembersEnable);
            Ext.getCmp('decision_' + appId + '_' + commissionMembers[i].id).fireEvent('select');
        }
      }
    }
  },

  showOosFields: function () {
    if (this.procedure.send_to_oos && Ext.getCmp(this.ids.oos_fieldset_id)) {
      Ext.getCmp(this.ids.oos_fieldset_id).enable();
      Ext.getCmp(this.ids.oos_fieldset_id).show();
    }
  },

  isValidApplicationsData: function () {
      var component = this;
      var applic_grid_store = Ext.getCmp(this.applic_grid_id).getStore();
      var isCanPlaceSave = this.isCanApplicationsPlaceSave();
      var members_attended = false;
      var commission_form = Ext.getCmp(this.commission_form_id);
      var commission_members = commission_form.getCommissionMembers();
      if (this.applications.length == 0 && commission_members.length > 0) {
          return true;
      }
      for (var i = NO_MAGIC_NUMBER_ZERO; i < this.applications.length; ++i) {
          var app_id = this.applications[i].app_id;
          var record = applic_grid_store.getById(app_id);
          if (record) {
              if (isCanPlaceSave && record.get('order_number_assigned') === 0) {
                  Ext.Msg.alert('Ошибка', 'Места для всех заявок должны быть расставлены');
                  return false;
              }

              if (!Ext.getCmp('basis_text_' + record.get('id')).getValue()) {
                Ext.Msg.alert('Ошибка', 'Основания для решения по всем заявкам должны быть заполнены');
                return false;
              }
              for (var j = 0; j < commission_members.length; ++j) {
                var member_id = commission_members[j].id;
                var reason_id = 'reason_decision_' + record.get('id') + '_' + member_id;
                var member_attended = Ext.getCmp('member_attended_' + member_id).getValue();
                if (member_attended && Ext.getCmp(reason_id) && !Ext.getCmp(reason_id).getValue()) {
                  Ext.Msg.alert('Ошибка', 'Основания для отказа по всем членам комиссии должны быть заполнены');
                  return false;
                }
              }

          }
      }
      for (var k = 0; k < commission_members.length; ++k) {
        if (Ext.getCmp('member_attended_' + commission_members[k].id).getValue()) {
          members_attended = true;
          break;
        }
      }
      if (!members_attended) {
        Ext.Msg.alert('Ошибка', 'Выберите члена комиссии, присутствовавшего на заседании');
        return false;
      }
      return true;
  },

  updateApplicationsRating: function(component) {
      var applic_grid_store = Ext.getCmp(component.applic_grid_id).getStore();
      if ((this.procedure_type == PROCEDURE_TYPE_AUCTION) && (this.stage == NO_MAGIC_NUMBER_TWO)) {
          return;
      }
      for (var i = NO_MAGIC_NUMBER_ZERO; i < component.applications.length; ++i) {
          var r = applic_grid_store.getById(component.applications[i].app_id);
          if (r) {
              var place = false;
              if (NO_MAGIC_NUMBER_ONE === component.applications.length) {
                  place = NO_MAGIC_NUMBER_ONE;
                  component.updateRating(r, component);
              } else {
                  if (Application.models.Procedure.groups.requests.indexOf(component.procedure_type)) {
                      component.updateRating(r, component);
                  }
                  place = component.applications[i].order_number_assigned;
              }
              if (place && place > 0 && APPLICATION_STATUS_PROCESSED == component.applications[i].status) {
                  r.set('order_number_assigned', place);
              } else if (APPLICATION_STATUS_DECLINED == component.applications[i].status) {
                  r.set('order_number_assigned', NO_MAGIC_NUMBER_MINUS_ONE);
              }
          }
      }
  },

  updateApplicationsDecision: function(record, commission_members) {
      var all_ok = true;
      var all_deny = true;
      var app_id = record.get('id');
      for (var j = 0; j < commission_members.length; j++) {
          if (!commission_members[j].can_vote) {
              continue;
          }
          var decision = Ext.getCmp('decision_' + app_id + '_' + commission_members[j].id);
          if (decision && Number(decision.getValue()) <= 0) {
              all_ok = false;
          }
          if (decision && Number(decision.getValue()) != 0) {
              all_deny = false;
          }
          if (!all_ok && !all_deny) {
              break;
          }
      }
      if (all_ok) {
          setFieldValue('commission_decision_yes_' + app_id, true);
          setFieldValue('commission_decision_no_' + app_id, false);
          Ext.getCmp('commission_decision_no_' + app_id).disable();
      } else if (all_deny) {
          setFieldValue('commission_decision_yes_' + app_id, false);
          setFieldValue('commission_decision_no_' + app_id, true);
          Ext.getCmp('commission_decision_yes_' + app_id).disable();
      } else {
          Ext.getCmp('commission_decision_yes_' + app_id).enable();
          Ext.getCmp('commission_decision_no_' + app_id).enable();
      }
  },

  isValidDataMeet: function (thisDate) {
    var dateStart = Ext.getCmp(this.ids.date_start_zk).getValue(),
        dateEnd = Ext.getCmp(this.ids.date_end_zk).getValue();

    if (dateStart && dateEnd && (dateStart > dateEnd )) {
      Ext.Msg.alert('Ошибка', 'Дата начала заседания должна быть раньше даты окончания заседания комиссии!');
      thisDate.setValue('');
    }
  },

  isValidTimeMeet: function (thisTime) {
    var dateStart = Ext.getCmp(this.ids.date_start_zk).getValue(),
        timeStart = Ext.getCmp(this.ids.time_start_zk).getValue(),
        dateEnd = Ext.getCmp(this.ids.date_end_zk).getValue(),
        timeEnd = Ext.getCmp(this.ids.time_end_zk).getValue();

    if (dateStart && dateEnd && (dateStart > dateEnd )) {
      if (timeStart > timeEnd ) {
        Ext.Msg.alert('Ошибка', 'Время начала заседания должно быть раньше времени окончания заседания' +
            ' комиссии!');
        thisTime.setValue('');
      }
    }
  },

    /**
     * Проверка на возможность сохранить "Место заявки, присвоенной комиссией".
     *
     * @returns {bool} Разрешено\Запрещено.
     */
    isCanApplicationsPlaceSave: function () {
        var lotStep = this.procedure.lots[0].lot_step,
            procedureType = this.procedure_type;

        var placesSaveAuction = ((procedureType == PROCEDURE_TYPE_AUCTION) &&
            (lotStep == PSEUDO_STEP_CONTRACT_SUMARIZE));

        var placesSaveInviteMakeOffer = ((procedureType == PROCEDURE_TYPE_INVITE_MAKE_OFFER) &&
            (lotStep == PSEUDO_STEP_EXAMINATION_EVALUATION_DEMAND));

        var placesSavePricelistReq = ((procedureType == PROCEDURE_TYPE_PRICELIST_REQ) &&
            (lotStep == PSEUDO_STEP_EXAMINATION_EVALUATION_DEMAND));

        var stepForTender = [PSEUDO_STEP_CONSIDERATION_DEMAND, PSEUDO_STEP_EVALUATION_COMPARISON_DEMANDS];
        var placesSaveTender = ((procedureType == PROCEDURE_TYPE_TENDER) &&
            (stepForTender.indexOf(lotStep) != INDEX_NOT_FOUND));

        return (placesSaveAuction || placesSaveInviteMakeOffer || placesSavePricelistReq || placesSaveTender);
    }

});
